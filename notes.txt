
git operators run in k8 cluster to monitor changes and pulls changes from git
git repo-desired state
k8 cluster-actual state
git revert to do undo changes made 

arogocd image updater
=================
Install ArgoCD Image Updater
 pod named argocd-image-updater
 If you are using a private Docker registry or need credentials for your registry, you need to add them as Kubernetes secrets. You can skip this step if you’re using public image registries (e.g., Docker Hub).
 For AWS ECR, you can use IAM roles or create an ECR login token via aws ecr get-login-password and store it in a secret.

git secret(created) will be also added in annotation of the argo app yaml file 
ArgoCD Image Updater is a tool used to automatically update Kubernetes resources managed by ArgoCD when new container images are available. To use it with semantic versioning (SemVer), you can configure the argocd-image-updater annotation in your ArgoCD Application resource, specifying how it should track and update images based on their version tags.


Argo CD Operator and Argo CD Controller are two important components in the Argo CD ecosystem, which is a GitOps tool used for deploying and managing applications in Kubernetes.

1. Argo CD Operator
The Argo CD Operator is a Kubernetes operator designed to manage the installation, configuration, and lifecycle of Argo CD instances. It automates many tasks that would otherwise require manual intervention, such as:

Installing and upgrading Argo CD components.
Managing Argo CD Custom Resources (like Applications, Projects, and Repositories).
Ensuring that the Argo CD instance is in the desired state (e.g., maintaining high availability, scaling, handling failover).
Key Responsibilities of Argo CD Operator:
Lifecycle management: It installs, upgrades, and manages Argo CD instances and related resources.
Configuration: It helps with the configuration of Argo CD components, making it easier to customize and manage multiple instances.
Automated tasks: Automates repetitive tasks like creating users, setting up repositories, etc.

Argo CD Controller
The Argo CD Controller is a core component of the Argo CD architecture that performs the continuous reconciliation of the desired application state defined in Git with the actual state in the Kubernetes cluster. It ensures that the applications deployed in Kubernetes match the desired configurations (YAML manifests) stored in a Git repository.

The controller works by:

Watching Git repositories for changes in application manifests.
Syncing changes to the Kubernetes cluster automatically, based on user-defined configurations and policies.
Reconciliation: If the state of the application in the Kubernetes cluster differs from the desired state defined in the Git repository, the controller attempts to reconcile the difference.
Key Responsibilities of Argo CD Controller:
Syncing applications: Ensures that the deployed applications in the Kubernetes cluster match the desired state defined in Git repositories.
Monitoring: Continuously monitors the cluster and Git for any drift between desired and actual application states.
Self-healing: When the actual state diverges from the desired state (e.g., if someone manually modifies resources in the cluster), the controller can automatically revert those changes to maintain consistency with Git.
Application management: It handles the lifecycle of applications (deployments, updates, rollbacks) in Kubernetes.

How to Backup Argo CD:(manually)
=================
Backing up Kubernetes Resources (CRDs): You can use kubectl to back up Argo CD’s resources:
kubectl get applications.argoproj.io -n <argo-cd-namespace> -o yaml > applications-backup.yaml
kubectl get appprojects.argoproj.io -n <argo-cd-namespace> -o yaml > projects-backup.yaml
kubectl get all -n <argo-cd-namespace> -o yaml > argocd-resources-backup.yaml

Backup Automation:
To automate the backup process, you could set up a Kubernetes CronJob that regularly exports these Kubernetes resources (CRDs, ConfigMaps, and Secrets) to a remote storage location like Amazon S3 or Google Cloud Storage.

Restore Applications and Projects:
kubectl apply -f applications-backup.yaml
kubectl apply -f projects-backup.yaml

resync applications>argocd app sync <app-name>

In Argo CD, an "Out of Sync" status occurs when the actual state of your Kubernetes resources (in the cluster) differs from the desired state defined in the Git repository. Argo CD continuously monitors the applications it manages and flags differences in real-time. Here are some common real-time scenarios when Argo CD might show "Out of Sync":
1. Manual Changes in Cluster
2. New Changes Pushed to Git
3. Image Tag Drift
4. Failed Sync Attempts
5. Configuration Drift
Example: A Horizontal Pod Autoscaler increases the replica count for a deployment, causing it to differ from the static replica count defined in the Git repo.
6.Resource Pruning Disabled
Cause: Argo CD detects resources in the cluster that are not defined in the Git repository, but automatic pruning of these resources is disabled.
Effect: These "extra" resources cause the app to be "Out of Sync" until manually pruned or managed.
Example: A service that was removed from the Git repo still exists in the cluster.


Pruning in Argo CD refers to the automatic deletion of Kubernetes resources that exist in the cluster but are no longer defined in the Git repository. When an application is synced with Argo CD, it checks the state of the cluster against the desired state defined in the Git repository. If resources in the cluster are found that should no longer exist (because they were removed from the Git repo), pruning is responsible for cleaning them up.

Self-healing in Argo CD refers to the ability of Argo CD to automatically detect and correct any drift between the actual state of resources in the Kubernetes cluster and the desired state as defined in the Git repository. When self-healing is enabled, Argo CD will automatically sync the cluster to match the Git repository without needing manual intervention.
It compares the actual state (current state in the cluster) with the desired state (defined in Git).
If self-healing is enabled, Argo CD immediately triggers a sync to correct the drift and bring the application back to the desired state as defined in Git.
The sync process can include reverting unauthorized changes, redeploying resources, or updating configurations.


gitops principles
================
1)declarative yaml apprach(discourge imperative comands)
2)git for version controller
3) git operator pull changes from git
4)reconcillation >>observe(git),diff(compares resources) and act

Devops>>changes will be pushed to cluster
Gitops>changes will be pulled(git operator) to cluster

Argo Apps and project
================
https://argo-cd.readthedocs.io/en/stable/user-guide/commands/argocd_app_create/

kubectl create namespace argocd

kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/v2.4.11/manifests/install.yaml

kubectl -n argocd get cm argocd-cm or
 k get cm -n argocd 
 kubectl -n argocd get svc argocd-server

 k edit -n argocd svc argocd-server Or 
 kubectl edit svc argocd-server -n argocd

 kubectl -n argocd get secrets argocd-initial-admin-secret -o json | jq .data.password -r | tr -d '\n'  | base64 -d

  kubectl -n argocd get secrets repo-1376608715 -o json | jq .data.url -r | base64 -d

  curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.4.11/argocd-linux-amd64
chmod +x /usr/local/bin/argocd

by default 3mins to reflect changes>>do hard refresh

Argo cli
===============
curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64

chmod +x argocd

sudo mv argocd /usr/local/bin/

argocd version

kubectl get svc -n argocd

kubectl port-forward svc/argocd-server -n argocd 8080:443

argocd app --help

https://github.com/NarendraJatti/kubernetes
# Create a directory app
  argocd app create guestbook --repo https://github.com/NarendraJatti/kubernetes --path test --dest-namespace default --dest-server https://kubernetes.default.svc

argocd app sync guestbook
argocd app list

argocd with helm
=====================
once helm chart is deployed in argo,will control evertything-no role of helm can not
use helm ls and helm commands
argocd app create helm-random-shapes \
--repo https://3000-port-h4jux2lve4kgutjb.labs.kodekloud.com/bob/gitops-argocd.git \
--path ./helm-chart \
--helm-set color.circle=pink \
--helm-set color.square=red \
--helm-set service.type=NodePort \
--dest-namespace default \
--dest-server https://kubernetes.default.svc

argocd app sync helm-random-shapes

argocd app get helm-random-shapes
argocd cluster list
argocd cluster add cluster2
When a new cluster is added into ArgoCD a service account called argocd-manager a cluster role called argocd-manager-role and a cluster role binding argocd-manager-role-binding is created.
argocd-master-node Role is not created when a new cluster is added to ArgoCD.
ArgoCD store the new cluster data in Secrets.
kubectl -n argocd get secrets | grep -i cluster
curl http://cluster2-controlplane:30335
kubectl apply -f https://3000-port-h4jux2lve4kgutjb.labs.kodekloud.com/bob/gitops-argocd/src/branch/master/declarative/multi-app/app-of-apps.yml -n argocd

curl -O https://3000-port-h4jux2lve4kgutjb.labs.kodekloud.com/bob/gitops-argocd/src/branch/master/declarative/multi-app/app-of-apps.yml

custom health check argocd
=========================
kubectl get cm moving-shapes-colors -o yaml -n health-check
kubectl patch configmap argocd-cm -n argocd --patch-file patch.yaml
Create a yaml with following code, vi patch.yaml:
Write a custom health-check script in ArgoCD to change the application health status if the TRAINGLE_COLOR is white in the configmap. The status should be as below.


    Health Status = DEGRADED

    Health Message = Use any color other than White
  data:
    resource.customizations.health.ConfigMap: |
      hs = {}
      hs.status = "Healthy"
       if obj.data.TRIANGLE_COLOR == "white" then
          hs.status = "Degraded"
          hs.message = "Use any color other than White "
       end
      return hs
Or
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
  namespace: argocd
data:
  resource.customizations.health.ConfigMap: |
    hs = {}
    hs.status = "Healthy"
    if obj.data.TRIANGLE_COLOR == "white" then
      hs.status = "Degraded"
      hs.message = "Use any color other than White"
    end
    return hs
kubectl apply -f patch.yaml

Storing Data in a ConfigMap
You can store any non-confidential data in a ConfigMap, such as:

Application configuration settings (e.g., database URLs, feature flags).
Environment-specific settings (e.g., environment variables).
Small files, such as .env or config files, can also be stored as data in a ConfigMap.

argocd app get health-check-app
argocd app set --sync-policy=auto health-check-app
kubectl get pod -n health-check
argocd app set health-check-app --sync-policy=auto --self-heal

argocd app set health-check-app  --sync-policy=auto --self-heal --auto-prune

argocd with jenkins
===================
https://learn.kodekloud.com/user/courses/gitops-with-argocd/module/2a9a275c-6019-4953-b2cf-96d9f4c303a8/lesson/98fe264a-5932-4d20-b0f1-eda2e025eb7f
argocd app history
argocd token stored in jenkins credentials
